{
  "name": "Unitest",
  "description": "Very simple unitesting for JavaScript",
  "version": "1.7.0",
  "author": {
    "name": "Borislav Peev",
    "email": "borislav.asdf@gmail.com"
  },
  "engine": [
    "node >= 4.0.0"
  ],
  "main": "Unitest.js",
  "scripts": {
    "test": "node ./tests/tests.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/perennials/unitest-js.git"
  },
  "readme": "Unitest\n=======\nVery simple unitesting for Node.js and browser.\n\n```\nnpm install https://github.com/Perennials/unitest-js/tarball/master\n```\n\nExample\n-------\n\n```js\n\"use strict\";\n\n\n// include the module\nrequire( 'Unitest' )\n\n// set this before including the unitest module otherwise tests\n// will not run. the module exports its stuff in global\n.enable()\n\n// if we want to make the tests run immediately\n// otherwise they will run on 'load' event for the document\n// doesn't apply for node.js, node is always in autorun mode\n// .autorun()\n\n// if you don't like color output, it shows garbage in sublime\n// .noColor()\n\n// if you want to run only the unitests of specific module and specific test\n.only( 'MyModule' /*, \"My test\"*/ );\n\n\n// associate module with the following unitests\nUnitest.module( 'MyModule' );\n\n\n// we define a test with optional title, but please use some titles to group related tests\nUnitest( 'My test', function ( test ) {\n\t\n\t// and check some conditions\n\t// this is simple true/false check\n\t// the title is optional here, not required at all,\n\t// but if you find particular joy in titling be my guest\n\t// i'm putting the titles for the sake of example so you\n\t// will see how they show in the output\n\ttest( true, 'test if this is true' );\n\ttest( typeof variable != 'undefined', 'variable is not defined' );\n\n\t// testeq is provided for deep tests, because JS can't compare array and objects with ==\n\ttest.eq( [ 1, { a: 2 } ], [ 1, { a: 2 } ], 'test for equality, deeply' );\n\ttest.eq( [ 1, 2 ], [ 2, 1 ], 'this equality test should fail' );\n\n\t// we can test deeply, for extension, i.e. the second argument can extend the first\n\ttest.eq( [ 1, { a: 2 } ], [ 1, { a: 2, c: 2 } ], CMP_EXTENDS, 'loose test for extension, deeply' );\n\n} );\n\n\n\n// we can have as many tests as we want\nUnitest( 'Another test', function ( test ) {\n\t\n\t// simplest condition\n\ttest( 1 === '1' );\n\n} );\n\n// we can have async test, but we need to mark them as finished explictly\nUnitestA( 'Named async test', function ( test ) {\n\t\n\tsetTimeout( function () {\n\t\t// simplest condition\n\t\ttest( 1 === '1' );\n\n\t\t// mark the async test as finished\n\t\ttest.out();\n\t}, 1 );\n\n} );\n\n\n// we are done with this module\nUnitest.module( null );\n\n```\n\nAnd the result should look like this:\n![](https://raw.github.com/Perennials/unitest-js/master/example/example.png)\n\n\nAuthors\n-------\nBorislav Peev (borislav.asdf at gmail dot com)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/perennials/unitest-js/issues"
  },
  "homepage": "https://github.com/perennials/unitest-js#readme",
  "_id": "Unitest@1.7.0",
  "_shasum": "af50a119e67a5152727b04cc4d6b914f00c176dc",
  "_resolved": "https://github.com/perennials/unitest-js/tarball/1.7.0",
  "_from": "https://github.com/perennials/unitest-js/tarball/1.7.0"
}
