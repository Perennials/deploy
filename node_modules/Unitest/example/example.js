"use strict";


// include the module
require( '../Unitest.js' )

// set this before including the unitest module otherwise tests
// will not run. the module exports its stuff in global
.enable()

// if we want to make the tests run immediately
// otherwise they will run on 'load' event for the document
// doesn't apply for node.js, node is always in autorun mode
// .autorun()

// if you don't like color output, it shows garbage in sublime
// .noColor()

// if you want to run only the unitests of specific module and specific test
.only( 'MyModule' /*, "My test"*/ );


// associate module with the following unitests
Unitest.module( 'MyModule' );


// we define a test with optional title, but please use some titles to group related tests
Unitest( 'My test', function ( test ) {
	
	// and check some conditions
	// this is simple true/false check
	// the title is optional here, not required at all,
	// but if you find particular joy in titling be my guest
	// i'm putting the titles for the sake of example so you
	// will see how they show in the output
	test( true, 'test if this is true' );
	test( typeof variable != 'undefined', 'variable is not defined' );

	// testeq is provided for deep tests, because JS can't compare array and objects with ==
	test.eq( [ 1, { a: 2 } ], [ 1, { a: 2 } ], 'test for equality, deeply' );
	test.eq( [ 1, 2 ], [ 2, 1 ], 'this equality test should fail' );

	// we can test deeply, for extension, i.e. the second argument can extend the first
	test.eq( [ 1, { a: 2 } ], [ 1, { a: 2, c: 2 } ], CMP_EXTENDS, 'loose test for extension, deeply' );

} );



// we can have as many tests as we want
Unitest( 'Another test', function ( test ) {
	
	// simplest condition
	test( 1 === '1' );

} );

// we can have async test, but we need to mark them as finished explictly
UnitestA( 'Named async test', function ( test ) {
	
	setTimeout( function () {
		// simplest condition
		test( 1 === '1' );

		// mark the async test as finished
		test.out();
	}, 1 );

} );


// we are done with this module
Unitest.module( null );