{
  "name": "Prototype",
  "description": "Extensions to the JS stdlib",
  "version": "1.5.1",
  "author": {
    "name": "Borislav Peev",
    "email": "borislav.asdf@gmail.com"
  },
  "engine": [
    "node >= 4.0.0"
  ],
  "main": "Prototype.js",
  "scripts": {
    "test": "node ./tests/tests.js"
  },
  "devDependencies": {
    "Unitest": "https://github.com/perennials/unitest-js/tarball/master"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/perennials/prototype-js.git"
  },
  "readme": "Prototype\n=========\nExtensions to the JavaScript standard library for Node.js and browser.\n\nMost notably this module provides better OOP support with classes,\ninheritance, mixins and interfaces with no runtime overhead, staying\nas close as possible to the native JS syntax.\n\nThe module is documented, unfortunately with docs comments in [jsdocgen](https://github.com/Perennials/jsdocgen)\nformat, and the JS support there is somehow WIP ...but rather planned.\n\nBut there are plenty of examples for the brave. The module is used in production\nin several projects.\n\n```\nnpm install https://github.com/Perennials/prototype-js/tarball/master\n```\n\n### Quick OOP example\n\n```js\n\"use strict\";\n\n// this modifies the global built in objects, it does not export anything\n// only needs to be included once\nrequire( 'Prototype' );\n\n// classes\n\nclass Earthling {\n\n\tconstructor () {\n\t\tthis._init = 1;\n\t}\n\n\tgetType () {\n\t\treturn 'Earthling';\n\t}\n\n}\n\nvar earthling = new Earthling();\n\n// inheritance\nclass Animal extends Earthling {\n\n\tconstructor () {\n\t\t// call the base constructor\n\t\tsuper();\n\n\t\t// call the constructor of the mixin\n\t\tTLeggedEarthling.call( this, 5 );\n\t}\n\t\n\tgetType () {\n\t\treturn 'Animal';\n\t\t// || we could call the parent method Earthling.prototype.getType.call( this );\n\t}\n}\n\n// intefaces (experimental)\n\nfunction ILeggedEarthling () {\n}\n\nILeggedEarthling.define( {\n\tgetLegs: function() {}\n} );\n\ntry {\n\tAnimal.implement( ILeggedEarthling );\n}\ncatch ( e ) {\n\t// getLegs is not implemented\n\tconsole.log( e.toString() );\n}\n\n// mixins\n\nfunction TLeggedEarthling ( nlegs ) {\n\tthis._nLegs = nlegs;\n}\n\nTLeggedEarthling.define( {\n\tgetLegs: function() {\n\t\treturn this._nLegs;\n\t}\n} );\n\nAnimal.mixin( TLeggedEarthling ).implement( ILeggedEarthling );\n\n// we can mixin multiple mixins\n// and we can resolve overlapping functions in mixins.\n// this will copy the contants of Templ1 and Templ2\n// in the prototype of Animal choosing Templ1.func1 over Templ2.func2\n// and choosing Templ2.func2 over Templ1.func2,\n// assuming that we had Templ1 and Templ2 with func1 and func2\n//\n// Animal.mixin( Templ1, Templ2, ResolveMixins( {\n// \tfunc1: Templ1,\n// \tfunc2: Templ2,\n// } ) );\n\nvar animal = new Animal();\n\n// this will pass\nif ( animal instanceof Earthling ) {\n\tconsole.log( animal.getType(), 'has', animal.getLegs(), 'legs' );\n}\n\n// this will not pass\nif ( animal instanceof TLeggedEarthling ) {\n\tconsole.error( 'should not happen' );\n}\n\n// this will not pass\nif ( animal instanceof ILeggedEarthling ) {\n\tconsole.error( 'should not happen' );\n}\n\n// to check instanceof iterfaces and traits we need to use a hack\n// this has runtime performance cost, but should be insignificant\nif ( animal.instanceof( ILeggedEarthling ) ) {\n\tconsole.log( animal.getType(), 'is legged earthling' );\n}\n\n// this also works\nif ( animal.instanceof( Earthling ) ) {\n\tconsole.log( animal.getType(), 'is', Earthling.prototype.getType.call( animal ) );\n}\n```\n\nTODO\n----\n\n* `Array.indexOf/lastIndexOf(item[,offset][,compare_callback])`\n* `Object.cmp()`, `Array.cmp()` (copy from unitest-js)\n* `Array.diff()`\n* `RegExp.matchRecursive()`\n* `RegExp.pushIndex/popIndex()` - sometimes RegExp is buggy and won't reset\n  lastIndex for even new strings. This will save the lastIndex and reset it so\n  the regexp can be reused safely without losing current position.\n* `RegExp.resetIndex()`\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/perennials/prototype-js/issues"
  },
  "homepage": "https://github.com/perennials/prototype-js#readme",
  "_id": "Prototype@1.5.1",
  "_shasum": "58d3adfed9b73adc5201158dc224b8e7714f2d7f",
  "_resolved": "https://github.com/perennials/prototype-js/tarball/master",
  "_from": "https://github.com/perennials/prototype-js/tarball/master"
}
