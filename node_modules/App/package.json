{
  "name": "App",
  "description": "Application classes for Node.js",
  "version": "1.5.2",
  "author": {
    "name": "Borislav Peev",
    "email": "borislav.asdf@gmail.com"
  },
  "engine": [
    "node >= 4.0.0"
  ],
  "scripts": {
    "test": "node ./tests/tests.js"
  },
  "dependencies": {
    "Prototype": "https://github.com/perennials/prototype-js/tarball/1.5.0"
  },
  "devDependencies": {
    "Unitest": "https://github.com/perennials/unitest-js/tarball/1.7.0",
    "Net": "https://github.com/perennials/net-node/tarball/1.2.0",
    "snappy": "*"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/perennials/app-node.git"
  },
  "readme": "App module\n==========\nApplication classes for Node.js.\n\n```sh\nnpm install https://github.com/Perennials/app-node/tarball/master\n```\n\n<!-- MarkdownTOC -->\n\n- [HttpApp](#httpapp)\n\t- [Example usage](#example-usage)\n\t- [Methods](#methods)\n\t\t- [Constructor](#constructor)\n\t\t- [.startListening()](#startlistening)\n\t\t- [.close()](#close)\n\t\t- [.onHttpRequest()](#onhttprequest)\n- [HttpAppRequest](#httpapprequest)\n\t- [Public properties](#public-properties)\n\t- [Methods](#methods-1)\n\t\t- [Constructor](#constructor-1)\n\t\t- [.onHttpHeaders()](#onhttpheaders)\n\t\t- [.onHttpContent()](#onhttpcontent)\n\t\t- [.onError()](#onerror)\n- [App](#app)\n\t- [Methods](#methods-2)\n\t\t- [.getArgv()](#getargv)\n\t\t- [.onClose()](#onclose)\n\t\t- [.close()](#close-1)\n- [Config](#config)\n\t- [Example usage](#example-usage-1)\n\t\t- [Stacking](#stacking)\n\t\t- [References](#references)\n- [Argv](#argv)\n\t- [Example usage](#example-usage-2)\n- [CliColors](#clicolors)\n\t- [Example usage](#example-usage-3)\n- [Authors](#authors)\n\n<!-- /MarkdownTOC -->\n\nHttpApp\n-------\n\nExtends [App](#app).\n\nProvides a base for building HTTP server applications. The default\nimplementation takes care of reading the whole request and handling errors\nwith node domains, so errors are associated with the proper HTTP request.\n\nTo reuse this class one extends the [HttpAppRequest](#httpapprequest) class\nand provides the constructor to `HttpApp`. The latter will install a request\nhandler and upon receiving a request will instantiate the user's\n`HttpAppRequest` class. This way all logic associated with the request can be\nplaced in the proper context.\n\n```js\nvar HttpApp = require( 'App/HttpApp' );\n```\n\n### Example usage\n\n```js\n\"use strict\";\n\nvar HttpApp = require( '../HttpApp' );\nvar HttpAppRequest = require( '../HttpAppRequest' );\n\n// this will be instantiated by HttpApp whenever we have a new request coming in\nclass MyAppRequest extends HttpAppRequest {\n\t\n\tconstructor ( app, req, res ) {\n\t\t// call the parent constructor\n\t\tsuper( app, req, res );\n\t}\n\t\n\tonError ( err ) {\n\n\t\tconsole.log( 'Damn, error happened with this specific client request', this.Request );\n\n\t\t// finish the response so we can close the server\n\t\tthis.Response.writeHead( 500 );\n\t\tthis.Response.end();\n\n\t\t// call the default handler, which will abort the app\n\t\tsuper.onError( err );\n\t}\n\n\n\t// this will be called when we have the whole http request\n\tonHttpContent ( content ) {\n\n\t\t// we have the full request at this point, headers and content\n\t\tif ( this.Request.headers[ 'content-encoding' ] === 'identity' ) {\n\t\t\tconsole.log( 'The request content is', content.toString( 'utf8' ) );\n\t\t}\n\n\t\tdoSomethingWithThe( this.Request, function ( good ) {\n\n\t\t\t// normal nodejs handling of the response\n\t\t\tthis.Response.writeHead( good ? 200 : 500, {\n\t\t\t\t'Connection': 'close',\n\t\t\t\t'Content-Type': 'text/plain'\n\t\t\t} );\n\t\t\tthis.Response.end( 'bye' );\n\n\t\t} );\n\n\t}\n}\n\n// construct a new HttpApp, tell it our request class is MyAppRequest\nvar app = new HttpApp( MyAppRequest, '0.0.0.0', 1337 );\napp.startListening();\n```\n\n### Methods\n\n- [Constructor](#constructor)\n- [.startListening()](#startlistening)\n- [.close()](#close)\n- [.onHttpRequest()](#onhttprequest)\n\n#### Constructor\nConstructor. The `appRequestClass` argument is a constructor of a class\nderived from `HttpAppRequest`. It will be used by `onHttpRequest()` to create\na new instance of this class for each incomming request.\n\n```js\nnew HttpApp(\n\tappRequestClass:Function\n\thost:String,\n\tport:Number\n);\n```\n\n#### .startListening()\nStarts listening for HTTP requests.\n\n```js\n.startListening();\n```\n\n\n#### .close()\nCloses the HTTP server (http.Server.close). `.onClose()` will be called\nbefore the callback.\n\n```js\n.close(\n\tcallback:function()|undefined\n);\n```\n\n\n#### .onHttpRequest()\nDefault HTTP request handler called directly from node's http.Server. The\ndefault implementation does the domain handling and calls `.onHttpHeaders()`.\nCan be overriden for advanced use.\n\n```js\n.onHttpRequest( req, res );\n```\n\n\n\nHttpAppRequest\n--------------\n\nThis object encapsulates node's native types passed to the HTTP request\ncallback, as well as the domain associated with the request. It should be\nsubclassed to override the desired functionality.\n\n```js\nvar HttpAppRequest = require( 'App/HttpAppRequest' );\n```\n\n- [Public properties](#public-properties)\n- [Methods](#methods-1)\n\n### Public properties\n\n```js\n{\n\tApp: HttpApp,\n\tRequest: http.IncommingMessage,\n\tResponse: http.ServerResponse,\n\tDomain: Domain\n}\n```\n\n### Methods\n\n- [Constructor](#constructor-1)\n- [.onHttpHeaders()](#onhttpheaders)\n- [.onHttpContent()](#onhttpcontent)\n- [.onError()](#onerror)\n\n#### Constructor\nConstructor. It receives reference to the `HttpApp` and nodejs' request and\nresponse objects from the request handler of the HTTP server. This method will\ncreate the node domain and associate it with the request and call\n[.onHttpHeaders()](#onhttpheaders). Normally this constructor should be called\nby the constructor of the derived classes.\n\n```js\nnew HttpAppRequest(\n\tapp: HttpApp,\n\treq: http.IncommingMessage,\n\tres: http.ServerResponse,\n);\n```\n\n\n#### .onHttpHeaders()\nCalled whenever there is HTTP request. The default implementation installs\n'data' handler, reads the content and calls `.onHttpContent()`. The default\nimplementation will check the headers and decompress `gzip`, `deflate` or\n`snappy` content. Can be overriden in case access to the HTTP headers is\nneeded before handling the content or for advanced use.\n\n```js\n.onHttpHeaders();\n```\n\n\n#### .onHttpContent()\nCalled whenever there is HTTP request and the whole request content is received.\n**Must be overriden**.\n\n```js\n.onHttpContent(\n\tcontent:Buffer\n);\n```\n\n\n#### .onError()\nCalled whenever uncaught exception happens in the context of an HTTP request.\nThe default handler will print the error to stderr and call `.close()` on the\n`.App` objects. **Recommended to override**.\n\n```js\n.onError(\n\terr:Error\n);\n```\n\n\nApp\n---\n\nBase application class for `HttpApp`. Not to be used directly.\n\nThis class will install `.close()` as signal handler for `SIGINT`, `SIGHUP`,\n`SIGTERM`, so it will try to close gracefully in all cases by calling `.onClose()`,\nwhich is meant to do cleanup.\n\n```js\nvar App = require( 'App/App' );\n```\n\n### Methods\n\n- [.getArgv()](#getargv)\n- [.onClose()](#onClose-1)\n- [.close()](#close-1)\n\n#### .getArgv()\nRetrieves the `process.argv` parsed with `Argv.parse()`.\n\n```js\n.getArgv() : Object|null;\n```\n\n\n#### .onClose()\nPerforms application specific onClose (as preparation for graceful exit). The\ndefault function does nothing but call the callback.\n\n```js\n.onClose(\n\tcallback:function()|undefined\n);\n```\n\n#### .close()\nPerforms `.onClose()` and then calls `process.exit( code )`.\n\n```js\n.close(\n\tcode:Number\n);\n```\n\n\nConfig\n------\n\nThe Config class provides stack-able object of properties, where the\nproperties in the objects of the upper layers can override the lower layers.\n\nProperties can refer to other properties and have a dynamic (callback) value.\n\n```js\nvar Config = require( 'App/Config' );\n```\n\n### Example usage\n\n#### Stacking\n\n```js\nvar Config = require( 'App/Config' );\n\n// default language\nvar ENG = new Config( { hello: 'hello', bye: 'bye' } );\n\n// another language extends the default\nvar DEU = new Config( { hello: 'hallo', bye: 'auf wiedersehen' }, ENG );\n\n// and yet another one\nvar langs = new Config( { hello: 'holla' }, DEU );\n\n// static propertiers can be accessed directly\nif ( langs.hello == 'holla' ) {\n\t// we have spanish string for hello\n}\nif ( langs.bye == 'auf wiedersehen' ) {\n\t// we don't have spanish string for bye and we use the german fallback\n}\n```\n\n#### References\n\n```js\nvar Config = require( 'App/Config' );\n\nvar cfg = new Config( {\n\tshared: {\n\t\tseparator: ', '\n\t},\n\n\t// we have absolute reference {name.full} and dynamic value {1}\n\tmy_name: 'my name is {name.full}; i am {1} years old.',\n\t\n\tname: {\n\t\tfirst: 'tosho',\n\t\tlast: 'afrikanski',\n\t\t\n\t\t// this is relative reference from the current node (_) or from the parent node (__)\n\t\t// _ and __ are equivalent to . and .. when dealing with the file system in the shell\n\t\t// they can be chained, of course, like __.__.and.so.on\n\t\tfull: '{_.last}{__.shared.separator}{_.first}'\n\t}\n} );\n\nif ( cfg.get( 'my_name', 30 ) == 'my name is afrikanski, tosho; i am 30 years old.' ) {\n\t// ...\n}\n```\n\n\nArgv\n----\n\nHelps with parsing application command line.\n\n```js\nvar Argv = require( 'App/Argv' );\n```\n\n### Example usage\n\n```js\nvar Argv = require( 'App/Argv' );\n\nvar argv = Argv.parse( [ '-arg1=value', '-flag', 'arg2', '-arg3=1', '-arg3=2', '-arg3' ] );\n// this will become\n{ arg1: 'value', flag: true, \"2\": 'arg2', arg3: [ '1', '2', true ] };\n```\n\n\nCliColors\n---------\n\nProvides the list of basic terminal color palette.\n\nThe colors are: `black`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan`, `white`.\n\nEach color has `bright` (or `intense`) and `bg` (background) variants. E.g.\n`brightblue`, `redbg`, `intenseredbg`.\n\nAdditionally:\n\n* `gray` is synonim for `intenseblack`.\n* `def` - default foreground.\n* `defbg`, - default background.\n* `reset` - reset all styles.\n\n```js\nvar clr = require( 'App/CliColors' );\n```\n\n### Example usage\n\n```js\nvar clr = require( 'App/CliColors' );\n\nconsole.log( clr.blue, clr.greenbg, 'blue on green background',\n             clr.def, 'default on green background',\n             clr.reset, 'default' );\n```\n\nAuthors\n-------\nBorislav Peev (borislav.asdf at gmail dot com)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/perennials/app-node/issues"
  },
  "homepage": "https://github.com/perennials/app-node#readme",
  "_id": "App@1.5.2",
  "_shasum": "0f0cb6279a4adda219398f279a8d2889df9c3f6c",
  "_resolved": "https://github.com/perennials/app-node/tarball/1.5.2",
  "_from": "https://github.com/perennials/app-node/tarball/1.5.2"
}
