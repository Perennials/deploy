
secret-access: ''

credentials:
  github:
    MyOrg:
      token: aslkdjlacozvozx8cuoz8xcuozxc

vars:
  env: dev

projects:

  ###################
  # a set of common docker images for our org, like nginx and php
  common-images:
    vars:
      local: /apps/{project}
    
    branches: master

    repo:
     remote: github/MyOrg/docker
     local: {project.local}

    ### include the docker config from a file, check common-images.docker.yml
    docker: !yamlfile 'common-images.docker.yml'



  ###################
  # some web service of our org
  ws2:
    # only enable the master and two digit semver branches
    branches: [ 'master', !!js/regexp '^\d+\.\d+$' ]
    repo:
      remote: github/MyOrg/ws2
      local: /apps/{project}/{branch}

    docker:
      image: 'myorg/{project}:{branch}'
      path: '{project.local}'



  ###################
  # some foo bar of our org
  foobar:
    # extend the base project
    extends: base-0.16

    # but customise the port for the pod
    pod:
      vars:
        port: 20011

  ###################
  base-0.16:
    template: true

    vars:
      local: /apps/foo/{project}/{branch}
      config: /config/foo/{project}/{branch}
      config.common: /config/foo/_common/{project.sdk.compat}
      sdk.compat: 0.16
      # we can have a js function. this will read a file and check which sdk version is used
      sdk.version: !!js/function >
        function ( global, require, vars ) {
          try {
            return require( 'fs' )
              .readFileSync( vars.render( '{project.local}/foo.php' ), 'utf8' )
              .match( /sdk-php\/([^\/]+)\/init.php/ )[ 1 ];
          }
          catch ( e ) {
            return 'master';
          }
        }

    repo:
      remote: github/MyOrg/foo-{project}
      local: '{project.local}'
      submodules:
        # the branch here is a variable. it will be resolved after the main repo is synced,
        # then the appropriate sdk version will be downloaded
        github/MyOrg/sdk-php#{project.sdk.version}: '{project.local}/lib/sdk-php'

    docker:
      image: 'myorg/{project}:{branch}'
      path: '{project.local}'

    pod:
      # we have a common pod definition, check compose.yml
      path: '{project.config.common}'
      # this variables will be sent used in the pod definition
      vars:
        env: '{env}'
        name: '{project}'
        version: '{branch}'
        version_tag: '{branch.tag}'
        version_flat: '{branch.flat}'

    